# Generated by Django 3.1.7 on 2021-02-24 02:45

import core.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AppointmentTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30, unique=True)),
                (
                    "has_details",
                    models.BooleanField(
                        default=False,
                        help_text="should the report refer to the appointment details. Unfortunately we can't enforce constraints across joins.",
                    ),
                ),
            ],
            options={
                "db_table": "appointment_tag",
            },
        ),
        migrations.CreateModel(
            name="AvailabilityTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", core.fields.CharTextField(max_length=65000, unique=True)),
                (
                    "notes",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                ("disabled", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "availability_tag",
            },
        ),
        migrations.CreateModel(
            name="CallReport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "report_source",
                    models.CharField(
                        choices=[("ca", "Caller app"), ("dc", "Data corrections")],
                        default="ca",
                        max_length=2,
                    ),
                ),
                (
                    "appointment_details",
                    core.fields.CharTextField(
                        blank=True,
                        help_text="appointment details (e.g., a URL). Should not be used if the appointment_tag's has_details is false.",
                        max_length=65000,
                        null=True,
                    ),
                ),
                ("public_notes", models.TextField(blank=True, null=True)),
                ("internal_notes", models.TextField(blank=True, null=True)),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="the time when the report was submitted. We will interpret this as a validity time",
                    ),
                ),
                (
                    "appointment_tag",
                    models.ForeignKey(
                        help_text="a single appointment tag, indicating how appointments are made",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="call_reports",
                        to="core.appointmenttag",
                    ),
                ),
                (
                    "availability_tags",
                    models.ManyToManyField(
                        db_table="call_report_availability_tag",
                        related_name="call_reports",
                        to="core.AvailabilityTag",
                    ),
                ),
            ],
            options={
                "db_table": "call_report",
            },
        ),
        migrations.CreateModel(
            name="CallRequestReason",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "short_reason",
                    core.fields.CharTextField(max_length=65000, unique=True),
                ),
                ("long_reason", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "call_request_reason",
            },
        ),
        migrations.CreateModel(
            name="County",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fips_code", models.IntegerField(unique=True)),
                ("name", core.fields.CharTextField(max_length=65000)),
                (
                    "hotline_phone_number",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "vaccine_info_url",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "vaccine_locations_url",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "official_volunteering_url",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                ("public_notes", models.TextField(blank=True, null=True)),
                (
                    "facebook_page",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "twitter_page",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "vaccine_reservations_url",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                ("population", models.IntegerField(blank=True, null=True)),
                (
                    "vaccine_dashboard_url",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "vaccine_data_url",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "vaccine_arcgis_url",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
            ],
            options={
                "db_table": "county",
                "verbose_name_plural": "counties",
            },
        ),
        migrations.CreateModel(
            name="EvaReport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name_from_import",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "phone_number_from_import",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                ("has_vaccines", models.BooleanField()),
                ("hung_up", models.BooleanField()),
                (
                    "valid_at",
                    models.DateTimeField(
                        help_text="the time when Eva's report was made (or our best estimate"
                    ),
                ),
                (
                    "uploaded_at",
                    models.DateTimeField(
                        help_text="this is the time when we uploaded Eva's report. It might not even be on the same day that the report was filed"
                    ),
                ),
            ],
            options={
                "db_table": "eva_report",
            },
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", core.fields.CharTextField(max_length=65000)),
                (
                    "phone_number",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "full_address",
                    core.fields.CharTextField(
                        blank=True,
                        help_text="the entire address, including city and zip code",
                        max_length=65000,
                        null=True,
                    ),
                ),
                (
                    "street_address",
                    core.fields.CharTextField(
                        blank=True,
                        help_text="the first line of the address",
                        max_length=65000,
                        null=True,
                    ),
                ),
                (
                    "city",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "zip_code",
                    models.CharField(
                        blank=True,
                        help_text="can accomodate ZIP+4 in standard formatting if needed",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "hours",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "website",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "google_places_id",
                    core.fields.CharTextField(
                        blank=True,
                        help_text="an ID that associates a location with a unique entry in the Google Places ontology",
                        max_length=65000,
                        null=True,
                    ),
                ),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                (
                    "soft_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="we never delete rows from this table; all deletes are soft",
                    ),
                ),
                (
                    "soft_deleted_because",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "provenance",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                ("internal_notes", models.TextField(blank=True, null=True)),
                ("do_not_call", models.BooleanField(default=False)),
                ("do_not_call_reason", models.TextField(blank=True, null=True)),
                (
                    "county",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="locations",
                        to="core.county",
                    ),
                ),
                (
                    "duplicate_of",
                    models.ForeignKey(
                        blank=True,
                        help_text="duplicate locations are associated with a canonical location",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="duplicate_locations",
                        to="core.location",
                    ),
                ),
            ],
            options={
                "db_table": "location",
            },
        ),
        migrations.CreateModel(
            name="LocationType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", core.fields.CharTextField(max_length=65000, unique=True)),
            ],
            options={
                "db_table": "location_type",
            },
        ),
        migrations.CreateModel(
            name="ProviderType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", core.fields.CharTextField(max_length=65000, unique=True)),
            ],
            options={
                "db_table": "provider_type",
            },
        ),
        migrations.CreateModel(
            name="Reporter",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "airtable_name",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "auth0_name",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "auth0_role_name",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
            ],
            options={
                "db_table": "reporter",
            },
        ),
        migrations.CreateModel(
            name="State",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("abbreviation", models.CharField(max_length=2, unique=True)),
                ("name", core.fields.CharTextField(max_length=65000, unique=True)),
            ],
            options={
                "db_table": "state",
            },
        ),
        migrations.CreateModel(
            name="PublishedReport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "appointment_details",
                    models.TextField(
                        blank=True,
                        help_text="appointment details (e.g., a URL). Should not be used if the appointment_tag's has_details is false.",
                        null=True,
                    ),
                ),
                ("public_notes", models.TextField(blank=True, null=True)),
                (
                    "valid_at",
                    models.DateTimeField(
                        help_text='the time that determines this report\'s time priority. Generally, only the latest report is displayed. This determines the "freshness" of the published report.'
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        help_text="the time at which this report is created (which may be different from the time at which it is valid)"
                    ),
                ),
                (
                    "appointment_tag",
                    models.ForeignKey(
                        help_text="a single appointment tag, indicating how appointments are made",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="published_reports",
                        to="core.appointmenttag",
                    ),
                ),
                (
                    "availability_tags",
                    models.ManyToManyField(
                        db_table="published_report_availability_tag",
                        related_name="published_reports",
                        to="core.AvailabilityTag",
                    ),
                ),
                (
                    "call_reports",
                    models.ManyToManyField(
                        db_table="published_report_call_report",
                        related_name="published_reports",
                        to="core.CallReport",
                    ),
                ),
                (
                    "eva_reports",
                    models.ManyToManyField(
                        db_table="published_report_eva_report",
                        related_name="published_reports",
                        to="core.EvaReport",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="published_reports",
                        to="core.location",
                    ),
                ),
                (
                    "reported_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="published_reports",
                        to="core.reporter",
                    ),
                ),
            ],
            options={
                "db_table": "published_report",
            },
        ),
        migrations.CreateModel(
            name="Provider",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", core.fields.CharTextField(max_length=65000, unique=True)),
                ("contact_phone_number", core.fields.CharTextField(max_length=65000)),
                (
                    "main_url",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "vaccine_info_url",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "vaccine_locations_url",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                ("public_notes", models.TextField()),
                (
                    "appointments_url",
                    core.fields.CharTextField(blank=True, max_length=65000, null=True),
                ),
                (
                    "internal_contact_instructions",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "provider_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="providers",
                        to="core.providertype",
                    ),
                ),
            ],
            options={
                "db_table": "provider",
            },
        ),
        migrations.AddField(
            model_name="location",
            name="location_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="locations",
                to="core.locationtype",
            ),
        ),
        migrations.AddField(
            model_name="location",
            name="provider",
            field=models.ForeignKey(
                blank=True,
                help_text="a location may or may not be associated with a provider",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="locations",
                to="core.provider",
            ),
        ),
        migrations.AddField(
            model_name="location",
            name="state",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="locations",
                to="core.state",
            ),
        ),
        migrations.AddField(
            model_name="evareport",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="eva_reports",
                to="core.location",
            ),
        ),
        migrations.AddField(
            model_name="county",
            name="state",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="counties",
                to="core.state",
            ),
        ),
        migrations.CreateModel(
            name="CallRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vesting_at",
                    models.DateTimeField(
                        help_text="the time at which this call request is considered 'active'. For example, a call request made by a skip will have a future vesting time."
                    ),
                ),
                (
                    "claimed_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="if non-null, the time until which the report is considered claimed",
                        null=True,
                    ),
                ),
                (
                    "tip_type",
                    core.fields.CharTextField(
                        blank=True,
                        choices=[
                            ("eva_report", "Eva report"),
                            ("scooby_report", "Scooby report"),
                            ("data_corrections_report", "Data corrections report"),
                        ],
                        help_text=" the type of tip that prompted this call request, if any",
                        max_length=65000,
                        null=True,
                    ),
                ),
                (
                    "call_request_reason",
                    models.ForeignKey(
                        help_text="a tag indicating why the call was added to the queue",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="call_requests",
                        to="core.callrequestreason",
                    ),
                ),
                (
                    "claimed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="if non-null, the reporter who has currently 'claimed' this request",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="call_requests_claimed",
                        to="core.reporter",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="call_requests",
                        to="core.location",
                    ),
                ),
                (
                    "tip_report",
                    models.ForeignKey(
                        blank=True,
                        help_text="the id of the report, if any that prompted this call request",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="prompted_call_requests",
                        to="core.callreport",
                    ),
                ),
            ],
            options={
                "db_table": "call_request",
            },
        ),
        migrations.AddField(
            model_name="callreport",
            name="call_request",
            field=models.ForeignKey(
                blank=True,
                help_text="the call request that this report was based on, if any.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="call_reports",
                to="core.callrequest",
            ),
        ),
        migrations.AddField(
            model_name="callreport",
            name="location",
            field=models.ForeignKey(
                help_text="a report must have a location",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="call_reports",
                to="core.location",
            ),
        ),
        migrations.AddField(
            model_name="callreport",
            name="reported_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="call_reports",
                to="core.reporter",
            ),
        ),
    ]
