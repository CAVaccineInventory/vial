# Generated by Django 3.1.7 on 2021-03-04 05:34

import core.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0030_provider_null_fields"),
    ]

    operations = [
        migrations.CreateModel(
            name="AppointmentAvailabilityReport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("feed_json", models.JSONField(blank=True, null=True)),
                ("is_test_data", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="FeedProvider",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(unique=True)),
                ("slug", models.TextField(unique=True)),
            ],
        ),
        migrations.AlterField(
            model_name="callrequest",
            name="tip_type",
            field=core.fields.CharTextField(
                blank=True,
                choices=[
                    ("eva_report", "Eva report"),
                    ("scooby_report", "Scooby report"),
                    ("data_corrections_report", "Data corrections report"),
                    ("feed_report", "Feed report"),
                ],
                help_text=" the type of tip that prompted this call request, if any",
                max_length=65000,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="report",
            name="created_at",
            field=models.DateTimeField(
                default=django.utils.timezone.now,
                help_text="the time when the report was submitted. We will interpret this as a validity time",
            ),
        ),
        migrations.CreateModel(
            name="LocationFeedConcordance",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("provider_id", models.TextField()),
                (
                    "feed_provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="location_concordances",
                        to="core.feedprovider",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="feed_concordances",
                        to="core.location",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FeedUpdate",
            fields=[
                ("uuid", models.UUIDField(primary_key=True, serialize=False)),
                (
                    "github_url",
                    models.URLField(
                        verbose_name="GitHub URL where the contents of this feed report can be found"
                    ),
                ),
                (
                    "feed_provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="updates",
                        to="core.feedprovider",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AppointmentAvailabilityWindow",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("starts_at", models.DateTimeField()),
                ("ends_at", models.DateTimeField()),
                (
                    "slots",
                    models.IntegerField(
                        help_text="the number of appointments available in this window"
                    ),
                ),
                (
                    "additional_restrictions",
                    models.ManyToManyField(
                        db_table="appointment_availability_window_availability_tag",
                        to="core.AvailabilityTag",
                    ),
                ),
                (
                    "availability_report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="windows",
                        to="core.appointmentavailabilityreport",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="appointmentavailabilityreport",
            name="feed_update",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="appointment_availability_reports",
                to="core.feedupdate",
            ),
        ),
        migrations.AddField(
            model_name="appointmentavailabilityreport",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="availability_reports",
                to="core.location",
            ),
        ),
    ]
