# Generated by Django 3.2 on 2021-05-06 07:12

from django.db import migrations


def remove_invalid_entries(apps, schema_editor):
    Location = apps.get_model("core", "Location")
    CallRequest = apps.get_model("core", "CallRequest")

    # Purge places that are not valid to call
    valid_for_call = (
        Location.objects.filter(soft_deleted=False, do_not_call=False)
        .exclude(phone_number__isnull=True)
        .exclude(phone_number="")
        .exclude(
            preferred_contact_method="research_online",
        )
    )

    unavailable_locations = Location.objects.all().difference(valid_for_call)
    CallRequest.objects.filter(location__in=unavailable_locations.values("id")).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0122_callrequest_created_at"),
    ]

    operations = [
        migrations.RunPython(
            remove_invalid_entries, reverse_code=lambda apps, schema_editor: None
        ),
        migrations.RunSQL(
            sql="""
DELETE FROM call_request
WHERE id in(
    SELECT
      id FROM (
        SELECT
          call_request.*, rank() OVER (
            PARTITION BY call_request.location_id
            ORDER BY priority_group ASC, priority DESC, id ASC
          )
          FROM call_request, (
            SELECT
              location_id FROM call_request
            WHERE
              completed = FALSE
            GROUP BY
              location_id
            HAVING
              count(*) > 1) dups
          WHERE
            dups.location_id = call_request.location_id
            AND completed = FALSE) ranked
        WHERE
          rank != 1);
""",
            reverse_sql=migrations.RunSQL.noop,
        ),
    ]
