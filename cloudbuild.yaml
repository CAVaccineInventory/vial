timeout: 60m
steps:
  # We need to unshallow the clone so Sentry can get the history; except that
  # this is a private repository, and the FETCH step has thrown the keys away
  # already.  Install a deploy key, known_hosts and swap the URL around to the
  # ssh one, so we can unshallow.
  - name: "gcr.io/cloud-builders/git"
    secretEnv: ["_SSH_KEY"]
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "$$_SSH_KEY" >> /root/.ssh/id_ed25519
        chmod 400 /root/.ssh/id_ed25519
        cp .github/known_hosts /root/.ssh/known_hosts
    volumes:
      - name: "ssh"
        path: /root/.ssh
  - name: gcr.io/cloud-builders/git
    args:
      - "remote"
      - "set-url"
      - "origin"
      - "git@github.com:CAVaccineInventory/vial"
  - name: gcr.io/cloud-builders/git
    args: ["fetch", "--unshallow"]
    volumes:
      - name: "ssh"
        path: /root/.ssh

  # Pull the previous image, as a starting point
  - name: gcr.io/cloud-builders/docker
    entrypoint: bash
    args: ["-c", "docker pull ${_IMAGE_NAME}:latest || exit 0"]

  # See Dockerfile; build and tag the image, using the cache in the last step.
  # We build the COMMIT_SHA into the image, so it knows what version it is.
  - id: "build image"
    name: "gcr.io/cloud-builders/docker"
    args:
      - build
      - "--build-arg"
      - "COMMIT_SHA=$COMMIT_SHA"
      - "-t"
      - "${_IMAGE_NAME}:${COMMIT_SHA}"
      - "-t"
      - "${_IMAGE_NAME}:latest"
      - "--cache-from"
      - "${_IMAGE_NAME}:latest"
      - .

  # Start up a postgres for tests
  - id: "start postgres"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "run"
      - "-d"
      - "--network=cloudbuild"
      - "-e"
      - "POSTGRES_HOST_AUTH_METHOD=trust"
      - "--name"
      - "vaccinate-db"
      - "postgres"

  - id: "test image"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "run"
      - "-t"
      - "--network=cloudbuild"
      - "-e"
      - "DJANGO_SECRET_KEY=1"
      - "-e"
      - "SOCIAL_AUTH_AUTH0_SECRET="
      - "-e"
      - "DATABASE_URL=postgres://postgres@vaccinate-db:5432/vaccinate"
      - "${_IMAGE_NAME}:latest"
      - "pytest"
      - "core/test_healthcheck.py"
      - "-vv"

  - id: "stop postgres"
    name: "gcr.io/cloud-builders/docker"
    args: ["rm", "--force", "vaccinate-db"]

options:
  dynamic_substitutions: true

availableSecrets:
  secretManager:
    - versionName: projects/373178984669/secrets/github-deploy/versions/latest
      env: _SSH_KEY

substitutions:
  _SERVICE_NAME: vaccinate
  _GCR_HOSTNAME: us.gcr.io
  _IMAGE_NAME: "${_GCR_HOSTNAME}/${PROJECT_ID}/${_SERVICE_NAME}"

  _DEPLOY: staging
  _DEPLOY_REGION: us-west2
  _DB_INSTANCE_NAME: "${_DEPLOY}"
  _GCLOUD_SETTINGS_NAME: "django-${_DEPLOY}-env"
  _CLOUDSQL_INSTANCE: "${PROJECT_ID}:${_DEPLOY_REGION}:${_DB_INSTANCE_NAME}"

# As the final step, this updates the `latest` image tag, once the deploy is
# complete.
images:
  - "${_IMAGE_NAME}:latest"
